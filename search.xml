<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代码复杂度</title>
    <url>/2020/03/03/Computer_Science/Programming_Skill/0_complexity/</url>
    <content><![CDATA[<p>本文主要是对于一小部分的代码时间复杂度的轻度总结，更多关于算法的内容可参考某著名大型算法博客 <span class="exturl" data-url="aHR0cHM6Ly9vaS13aWtpLm9yZy8=" title="https://oi-wiki.org/">OI Wiki<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<h4 id="代码1辗转相除法求最大公约数"><a class="markdownIt-Anchor" href="#代码1辗转相除法求最大公约数"></a> 代码1：辗转相除法求最大公约数</h4>
<blockquote>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="代码2求1到n每个数字的因数和sumj存j的因数和"><a class="markdownIt-Anchor" href="#代码2求1到n每个数字的因数和sumj存j的因数和"></a> 代码2：求1到n每个数字的因数和（sum[j]存j的因数和）</h4>
<blockquote>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mfrac><mi>n</mi><mi>i</mi></mfrac><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msubsup><mo>∫</mo><mn>1</mn><mi>n</mi></msubsup><mfrac><mn>1</mn><mi>x</mi></mfrac><mi>d</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n} \frac{n}{i} = O(n\int_{1}^{n}\frac{1}{x}dx) = O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.149292em;vertical-align:-0.345em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.215112em;vertical-align:-0.35582em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8592920000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> <br> PS: 代码里实际不会经过所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mi>i</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>的累加，只会累加能除尽的i，不过复杂度是在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>内。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&lt;=n; j+=i)</span><br><span class="line">        sum[j] += i;</span><br></pre></td></tr></table></figure>
<h4 id="代码3找n以内的质数埃氏筛法"><a class="markdownIt-Anchor" href="#代码3找n以内的质数埃氏筛法"></a> 代码3：找n以内的质数（埃氏筛法）</h4>
<blockquote>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nloglogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i&lt;=n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!vis[i]) </span><br><span class="line">    &#123;</span><br><span class="line">        prime[tot++] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j += i)</span><br><span class="line">            vis[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="代码4找n以内的质数欧拉筛法"><a class="markdownIt-Anchor" href="#代码4找n以内的质数欧拉筛法"></a> 代码4：找n以内的质数（欧拉筛法）</h4>
<blockquote>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 每个合数被其最小质因子筛掉，故只访问一次即可</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        prime[tot++] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot  &amp;&amp; prime[j] &lt;= n / i; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="代码5整除分块数论分块"><a class="markdownIt-Anchor" href="#代码5整除分块数论分块"></a> 代码5：整除分块（数论分块）</h4>
<blockquote>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line">    j = n / (n / i);</span><br><span class="line">    <span class="comment">// do sth</span></span><br><span class="line">    i = j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer Science</category>
        <category>Programming Skill</category>
      </categories>
  </entry>
  <entry>
    <title>Legal High 开篇，重新审视自己的信仰</title>
    <url>/2020/02/23/film-review/Legal_High/ep1/</url>
    <content><![CDATA[<p>Legal High 前三集讲述了新人律师黛真知子因为一起刑事辩护，与古美门律师相识之后的三个案件。如果说第一个案件让黛真知子第一次对律师职业的本质产生疑问，那么后两个案件让她理解了各行内部的或许不光彩但又无法撼动的内在规律。</p>
<a id="more"></a>
<p>第一个案件，古美门和黛找到检方漏洞，以检方证据不足为由，帮助嫌疑人摆脱故意杀人的嫌疑。这个时候的黛刚走出校门，心怀理想主义，警方对于嫌疑人的刑讯逼供轻易的使她站在了嫌疑人一方。当她以为最终凭自己的努力帮嫌疑人摆脱冤情，嫌疑人走出法院后所暴露出的恶毒本性让她对自己的所做产生了质疑，觉得自己或许掩盖了真相。古美门告诉她，律师不是神，不可能知道真相是什么，嫌疑人被释放是因为证据不足，并不是她的错，律师的责任只是在法律框架下为委托人提供帮助，仅此而已。这番话使她决定跟随古美门，在更多的实际案件中，思考自己到底信仰什么。</p>
<p>第二个案件是一个作品剽窃案。其中揭示了音乐商业中广泛的代笔行为和光环效应。在商业的大环境下，造神不可避免，这仿佛成为了传播作品的捷径。被推到台前的神通过其商业价值养活着一个个其背后真实的创作者，品牌效应又会带来更大的利润。随即产生了投机者，他们有恃无恐的剽窃着产业链外的独立创作者，由于产业链内部的强利益关系，品牌团队也不得不保护这些投机者以免打破好不容易创造的神话。但令人振奋的是，在这个案件中，黛真知子看到了这个世界上还是有那些勇敢的独立创作者敢于与一个商业帝国对抗，甚至不为金钱，只为了一个尊重。。</p>
<p>第三个案件有两分支，古美门在他接到的案件中帮助爆粗口老太太敲诈了棒球俱乐部一大笔钱，这也算古美门第一次给黛展示了如何利用行业内潜在规律，取得最终的辩护胜利。他使用了诸如对法官的背景详细搜集并对症下药，以及诱导式取证。黛接到了一个关于跟踪狂抢亲的案件。在调查取证的过程中，她发现人的感情在利益面前还是那么脆弱。被贴上跟踪狂标签的委托人和黛大学时期那么的像，天真的以为感情寄托的对象也会重情重义，一尘不染。现实却总是一次次的打脸。我很欣赏委托人最后阻止黛拿出帮他脱罪的关键证据的那个举动，他知道这个画像意味着女原告并不是没有感情，只是迫于现实要下决心摆脱之前的一切，她内心一定饱受折磨。委托人不愿意在最后这个分别的法庭上，再去困扰她。黛真知子也在这个法庭上，在和她之前喜欢的渣男教授的对辩中，告别了过去那个天真但又脆弱的自己。</p>
<p>以上三个案件只是Legal High这部无比精彩的作品的一个小小的开场。黛真知子和古美门价值观的分歧也在逐渐清晰。黛认为律师的职责在于引导法官看到事件真相，输赢不是一切，而古美门则认为律师永远无法看到真相，相较于缥缈的正义感，通过法律帮委托人赢得诉讼才是律师的责任。那么，我支持哪一方呢？至少目前的我还没有答案。</p>
]]></content>
      <categories>
        <category>Film Review</category>
        <category>Legal High</category>
      </categories>
  </entry>
  <entry>
    <title>Online Judge 基本代码框架</title>
    <url>/2020/02/23/Computer_Science/Settings/1_Contest_framework/</url>
    <content><![CDATA[<p>编程竞赛一般的模式是常规在本地测试，然后上传代码提交。故标准化本地调试的配置会有事半功倍的效果。这一篇博客主要是我在学习了Codeforces排名前列的前辈们的代码后，总结出的比较规范的代码框架和一些注意事项。解决这些可能拖慢节奏的小问题，我们就可以愉快的解题了！</p>
<a id="more"></a>
<h2 id="通用代码结构"><a class="markdownIt-Anchor" href="#通用代码结构"></a> 通用代码结构</h2>
<p>通过preprocessor option的方式<br />
1. 重定向input/output文件<br />
2. 计算代码块的运行时间</p>
<p><strong>Linux系统：</strong> 在g++指令中只需要加 <code>-DLOCAL_RUN</code> 作为预处理器指令即可。</p>
<p><strong>Windows系统：</strong> 在<strong>Visual Studio</strong>中找到项目属性，选择Preprocessor，在Preprocessor Definition里点击Edit，添加 <code>LOCAL_RUN</code> 即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt; // for time spend</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; // redirect input/output file</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> ld = <span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll LINF = (ll)<span class="number">2e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_RUN</span></span><br><span class="line">    freopen(<span class="string">"test.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"test.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">auto</span> start = chrono::high_resolution_clock::now();</span><br><span class="line">  <span class="built_in">run</span>();</span><br><span class="line">  <span class="keyword">auto</span> <span class="built_in">end</span> = chrono::high_resolution_clock::now();</span><br><span class="line">	</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL_RUN</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Execution time: "</span></span><br><span class="line">      &lt;&lt; chrono::duration_cast&lt;chrono::milliseconds&gt;(<span class="built_in">end</span> - start).count()</span><br><span class="line">      &lt;&lt; <span class="string">" ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="visual-studio-必要初始设置"><a class="markdownIt-Anchor" href="#visual-studio-必要初始设置"></a> Visual Studio 必要初始设置</h2>
<ol>
<li>创建empty C++ project</li>
<li>如果出现printf等安全性警告，可：</li>
</ol>
<blockquote>
<p>在Solution Explorer中右键项目名 -&gt; properties -&gt; C/C++ -&gt; SDL checks更改为No</p>
</blockquote>
<h2 id="另一种替代stdin和stdout的手段-命令行"><a class="markdownIt-Anchor" href="#另一种替代stdin和stdout的手段-命令行"></a> 另一种替代stdin和stdout的手段-命令行</h2>
<p><strong>Linux系统：</strong> 创建 bash 运行文件 <code>run.sh</code> 并写入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -Wall -Wshadow -std=c++11 main.cpp -o projectname</span><br><span class="line">./projectname &lt; test.in &gt; test.out</span><br></pre></td></tr></table></figure>
<p>通过 <code>bash run.sh</code> 编译并运行代码。</p>
<p><strong>Windows系统：</strong> 在 <strong>Visual Studio</strong> 的项目属性下的 Debugging 选项卡下找到 Command Arguments，输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt; &quot;$(ProjectDir)test.in&quot; &gt;&quot;$(ProjectDir)test.out&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer Science</category>
        <category>General Settings</category>
      </categories>
  </entry>
  <entry>
    <title>Vim 编辑器的基本配置</title>
    <url>/2020/02/23/Computer_Science/Settings/0_Vim_setting/</url>
    <content><![CDATA[<h3 id="配置vim编辑器"><a class="markdownIt-Anchor" href="#配置vim编辑器"></a> 配置Vim编辑器</h3>
<p>在<code>.vimrc</code>文件中写入以下配置信息：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">syntax on          <span class="string">" open syntax color for languages</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set tabstop=2      "</span> The width of a TAB is <span class="built_in">set</span> to 2</span><br><span class="line"><span class="built_in">set</span> shiftwidth=2   <span class="string">" Indents will have a width of 2</span></span><br><span class="line"><span class="string">set expandtab      "</span> Expand TABs to spaces</span><br><span class="line"><span class="built_in">set</span> smartindent</span><br><span class="line"></span><br><span class="line"><span class="string">"backspace to delete one level of indent</span></span><br><span class="line"><span class="string">set backspace=indent,eol,start </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set number         "</span> open line number</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> hlsearch       <span class="string">" open highlight pattern</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">colorscheme molokai</span></span><br><span class="line"><span class="string">"</span>colorscheme solarized</span><br></pre></td></tr></table></figure>
<h3 id="vim-常用快捷键"><a class="markdownIt-Anchor" href="#vim-常用快捷键"></a> Vim 常用快捷键</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kZGU3N2UzYjI5OWY=" title="https://www.jianshu.com/p/dde77e3b299f">参考1<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82ODExMTQ3MQ==" title="https://zhuanlan.zhihu.com/p/68111471">参考2<i class="fa fa-external-link"></i></span></p>
<h3 id="编译运行重定向标准输入和输出"><a class="markdownIt-Anchor" href="#编译运行重定向标准输入和输出"></a> 编译运行（重定向标准输入和输出）</h3>
<p>竞赛中常把标准输入和标准输出分开，并尽可能从文件中读取输入。这里可把这些操作综合在一个<code>run.sh</code>文件中一步运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -Wall -Wshadow -std=c++11 main.cpp -o projectname</span><br><span class="line">./projectname &lt; test.in &gt; test.out</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Computer Science</category>
        <category>General Settings</category>
      </categories>
  </entry>
</search>
